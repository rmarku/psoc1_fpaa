//*****************************************************************************
//*****************************************************************************
//  FILENAME: SPI.h
//  Version: 2.80, Updated on 2015/3/4 at 22:27:42
//  Generated by PSoC Designer 5.4.3191
//
//  DESCRIPTION: SPIS User Module C Language interface file.
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef SPI_INCLUDE
#define SPI_INCLUDE

#include <m8c.h>

#pragma fastcall16  SPI_EnableInt
#pragma fastcall16  SPI_DisableInt
#pragma fastcall16  SPI_Start
#pragma fastcall16  SPI_Stop
#pragma fastcall16  SPI_SetupTxData
#pragma fastcall16  SPI_bReadRxData
#pragma fastcall16  SPI_bReadStatus
#pragma fastcall16  SPI_DisableSS
#pragma fastcall16  SPI_EnableSS


//-------------------------------------------------
// Prototypes of the SPI API.
//-------------------------------------------------
extern void  SPI_EnableInt(void);
extern void  SPI_DisableInt(void);
extern void  SPI_Start(BYTE bConfiguration);
extern void  SPI_Stop(void);
extern void  SPI_SetupTxData(BYTE bTxData);
extern BYTE  SPI_bReadRxData(void);
extern BYTE  SPI_bReadStatus(void);
extern void  SPI_DisableSS(void);
extern void  SPI_EnableSS(void);


//------------------------------------------------------
// Old function prototypes.  Will be removed in future
// release.  Do not use.
//------------------------------------------------------
#pragma fastcall16 bSPI_ReadRxData
#pragma fastcall16 bSPI_ReadStatus
#pragma fastcall16 SPI_ClearSS
#pragma fastcall16 SPI_SetSS

extern BYTE bSPI_ReadRxData(void);   // Deprecated, see SPI_bReadRxData
extern BYTE bSPI_ReadStatus(void);   // Deprecated, see SPI_bReadStatus
extern void  SPI_SetSS(void);        // Deprecated, see SPI_DisableSS
extern void  SPI_ClearSS(void);      // Deprecated, see SPI_EnableSS


//-------------------------------------------------
// Defines for SPI API's.
//-------------------------------------------------
#define SPI_INT_REG_ADDR                       ( 0x0e1 )
#define SPI_bINT_MASK                          ( 0x04 )

//-------------------------------
// SPI Configuration definitions
//-------------------------------
#define  SPI_SPIS_MODE_0              0x00      // MODE 0 - Leading edge latches data - pos clock
#define  SPI_SPIS_MODE_1              0x02      // MODE 1 - Leading edge latches data - neg clock
#define  SPI_SPIS_MODE_2              0x04      // MODE 2 - Trailing edge latches data - pos clock
#define  SPI_SPIS_MODE_3              0x06      // MODE 3 - Trailing edge latches data - neg clock
#define  SPI_SPIS_LSB_FIRST           0x80      // LSB bit transmitted/received first
#define  SPI_SPIS_MSB_FIRST           0x00      // MSB bit transmitted/received first

//-------------------------------
// SPI Status register masks
//-------------------------------
#define  SPI_SPIS_RX_OVERRUN_ERROR    0x40      // Overrun error in received data
#define  SPI_SPIS_TX_BUFFER_EMPTY     0x10      // TX Buffer register is ready for next data byte
#define  SPI_SPIS_RX_BUFFER_FULL      0x08      // RX Buffer register has received current data
#define  SPI_SPIS_SPI_COMPLETE        0x20      // SPI Tx/Rx cycle has completed

//-------------------------------------------------
// Register Addresses for SPI
//-------------------------------------------------
#pragma ioport  SPI_CONTROL_REG:    0x02b                  //Control register
BYTE            SPI_CONTROL_REG;
#pragma ioport  SPI_SHIFT_REG:  0x028                      //TX Shift Register register
BYTE            SPI_SHIFT_REG;
#pragma ioport  SPI_TX_BUFFER_REG:  0x029                  //TX Buffer Register
BYTE            SPI_TX_BUFFER_REG;
#pragma ioport  SPI_RX_BUFFER_REG:  0x02a                  //RX Buffer Register
BYTE            SPI_RX_BUFFER_REG;
#pragma ioport  SPI_FUNCTION_REG:   0x128                  //Function register
BYTE            SPI_FUNCTION_REG;
#pragma ioport  SPI_INPUT_REG:  0x129                      //Input register
BYTE            SPI_INPUT_REG;
#pragma ioport  SPI_OUTPUT_REG: 0x12a                      //Output register
BYTE            SPI_OUTPUT_REG;

#endif
// end of file SPI.h
